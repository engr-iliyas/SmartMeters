@page "/Meters/edit"
@inject Smart.Meters.Data.ApplicationDbContext DB
@using Smart.Meters.Model
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Meter</h4>
<hr />
@if (Meter is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Meter" OnValidSubmit="UpdateMeter" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Meter.ID" value="@Meter.ID" />
                <div class="mb-3">
                    <label for="model" class="form-label">Model:</label>
                    <InputText id="model" @bind-Value="Meter.Model" class="form-control" />
                    <ValidationMessage For="() => Meter.Model" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="seal" class="form-label">Seal:</label>
                    <InputText id="seal" @bind-Value="Meter.Seal" class="form-control" />
                    <ValidationMessage For="() => Meter.Seal" class="text-danger" />
                </div>
                @* <div class="mb-3">
                    <label for="type" class="form-label">Type:</label>
                    <InputText id="type" @bind-Value="Meter.Type" class="form-control" />
                    <ValidationMessage For="() => Meter.Type" class="text-danger" />
                </div> *@
                <div class="mb-3">
                    <label for="installationdate" class="form-label">InstallationDate:</label>
                    <InputDate id="installationdate" @bind-Value="Meter.InstallationDate" class="form-control" />
                    <ValidationMessage For="() => Meter.InstallationDate" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/meters">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int ID { get; set; }

    [SupplyParameterFromForm]
    public Meter? Meter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Meter ??= await DB.Meter.FirstOrDefaultAsync(m => m.ID == ID);

        if (Meter is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateMeter()
    {
        DB.Attach(Meter!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MeterExists(Meter!.ID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/meters");
    }

    bool MeterExists(int id)
    {
        return DB.Meter.Any(e => e.ID == id);
    }
}
